<?xml version="1.0"?>
<robot name="GoCart180"
    xmlns:xacro="http://ros.org/wiki/xacro">

    <xacro:arg name="robot_name" default="GoCart180"/>

    <!-- Define robot constants -->
    <xacro:property name="base_width" value="0.525"/>
    <xacro:property name="base_length" value="0.73"/>
    <xacro:property name="base_height" value="0.30"/>

    <xacro:property name="wheel_radius" value="0.08"/>
    <xacro:property name="wheel_width" value="0.10"/>

    <xacro:property name="wheel_xoff" value="0.0"/>
    <xacro:property name="wheel_ygap" value="-0.02"/>
    <xacro:property name="wheel_zoff" value="-0.13"/>

    <xacro:property name="caster_radius" value="0.05"/>
    <xacro:property name="caster_xoff" value="0.25"/>

    <xacro:property name="imu_xoff" value="0.0"/>
    <xacro:property name="imu_yoff" value="0.0"/>
    <xacro:property name="imu_zoff" value="0.09"/>

    <xacro:property name="laser_xoff" value="0.25"/>
    <xacro:property name="laser_yoff" value="0.0"/>
    <xacro:property name="laser_zoff" value="0.30"/>

    <!-- Define some commonly used intertial properties  -->
    <xacro:macro name="box_inertia" params="m w h d">
        <inertial>
            <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}"/>
            <mass value="${m}"/>
            <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
        </inertial>
    </xacro:macro>

    <xacro:macro name="cylinder_inertia" params="m r h">
        <inertial>
            <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
            <mass value="${m}"/>
            <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/>
        </inertial>
    </xacro:macro>

    <xacro:macro name="sphere_inertia" params="m r">
        <inertial>
            <mass value="${m}"/>
            <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0" izz="${(2/5) * m * (r*r)}"/>
        </inertial>
    </xacro:macro>

    <!-- Robot Base -->
    <link name="base_link">
        <visual>
            <origin xyz="${-(wheel_xoff)} 0 ${-(wheel_zoff)}" rpy="0 0 0" />
            <geometry>
                <box size="${base_length} ${base_width} ${base_height}"/>
            </geometry>
        </visual>

        <collision>
            <origin xyz="${-(wheel_xoff)} 0 ${-(wheel_zoff)}" rpy="0 0 0" />
            <geometry>
                <box size="${base_length} ${base_width} ${base_height}"/>
            </geometry>
        </collision>

        <xacro:box_inertia m="1" w="${base_width}" d="${base_length}" h="${base_height}"/>
    </link>

    <!-- Wheels-->
    <xacro:macro name="wheel" params="prefix y_reflect">
        <link name="${prefix}_link">
            <visual>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
                </geometry>
                <material name="Black">
                    <color rgba="1.0 1.0 1.0 1.0"/>
                </material>
            </visual>

            <collision>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
                </geometry>
            </collision>

            <xacro:cylinder_inertia m="1" r="${wheel_radius}" h="${wheel_width}"/>
        </link>

        <joint name="${prefix}_joint" type="continuous">
            <parent link="base_link"/>
            <child link="${prefix}_link"/>
            <origin xyz="0 ${y_reflect*(base_width/2-wheel_width/2+wheel_ygap)} 0" rpy="${-pi/2} 0 0"/>
            <axis xyz="0 0 1"/>
            <gazebo reference="${prefix}_link">
                <mu1>1.0</mu1>
                <mu2>0.9</mu2>
                <slip1>0.01</slip1>
                <slip2>0.01</slip2>
                <fdir1>0 0 1</fdir1>
            </gazebo>
        </joint>

        <gazebo reference="${prefix}_link">
            <material name = "Black">Gazebo/Black</material>
        </gazebo>
    </xacro:macro>

    <xacro:wheel prefix="left_wheel" y_reflect="1"/>
    <xacro:wheel prefix="right_wheel" y_reflect="-1"/>

    <xacro:macro name="caster" params="prefix x_reflect">
        <link name="${prefix}_caster">
            <visual>
                <geometry>
                    <sphere radius="${caster_radius}"/>
                </geometry>
                <material name="Black">
                    <color rgba="1.0 1.0 1.0 1.0"/>
                </material>
            </visual>

            <collision>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <sphere radius="${caster_radius}"/>
                </geometry>
            </collision>

            <xacro:sphere_inertia m="1" r="${caster_radius}"/>
        </link>

        <joint name="${prefix}_caster_joint" type="continuous">
            <parent link="base_link"/>
            <child link="${prefix}_caster"/>
            <origin xyz="${-(wheel_xoff)+x_reflect*caster_xoff} 0.0 ${-(base_height/2)+caster_radius-(wheel_radius-(base_height/2))}" rpy="0 0 0"/>
        </joint>

        <gazebo reference="${prefix}_caster">
            <material name = "Black">Gazebo/Black</material>
        </gazebo>
    </xacro:macro>

    <xacro:caster prefix="front" x_reflect="1"/>
    <xacro:caster prefix="rear" x_reflect="-1"/>

    <!-- Lidar -->
    <link name="laser">
        <inertial>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <mass value="0.125"/>
            <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001" />
        </inertial>

        <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <cylinder radius="0.0508" length="0.055"/>
            </geometry>
        </collision>

        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <cylinder radius="0.0508" length="0.055"/>
            </geometry>
            <material name="Grey">
                <color rgba="0.2 0.2 0.2 1.0"/>
            </material>
        </visual>
    </link>

    <joint name="laser_joint" type="fixed">
        <parent link="base_link"/>
        <child link="laser"/>
        <origin xyz="${laser_xoff} ${laser_yoff} ${laser_zoff}" rpy="0 0 0"/>
    </joint>

    <gazebo reference="laser">
        <material name = "Grey">Gazebo/Grey</material>
        <sensor name="lidar" type="ray">
            <always_on>true</always_on>
            <visualize>false</visualize>
            <update_rate>50</update_rate>
            <ray>
                <scan>
                    <horizontal>
                        <samples>1080</samples>
                        <resolution>1.000000</resolution>
                        <min_angle>-2.26889</min_angle>
                        <max_angle>2.26889</max_angle>
                    </horizontal>
                </scan>
                <range>
                    <min>0.08</min>
                    <max>30</max>
                    <resolution>0.01</resolution>
                </range>
                <noise>
                    <type>gaussian</type>
                    <mean>0.0</mean>
                    <stddev>0.0</stddev>
                </noise>
            </ray>
            <plugin name="scan" filename="libgazebo_ros_ray_sensor.so">
                <ros>
                    <remapping>~/out:=scan</remapping>
                </ros>
                <output_type>sensor_msgs/LaserScan</output_type>
                <frame_name>$(arg robot_name)/laser</frame_name>
            </plugin>
        </sensor>
    </gazebo>

    <!-- Diff Drive -->
    <gazebo>
        <plugin name='diff_drive' filename='libgazebo_ros_diff_drive.so'>
            <update_rate>30</update_rate>

            <!-- wheels -->
            <left_joint>left_wheel_joint</left_joint>
            <right_joint>right_wheel_joint</right_joint>

            <!-- kinematics -->
            <wheel_separation>0.486</wheel_separation>
            <wheel_diameter>0.16</wheel_diameter>

            <!-- limits -->
            <max_wheel_torque>10</max_wheel_torque>
            <max_wheel_acceleration>1.0</max_wheel_acceleration>

            <command_topic>cmd_vel</command_topic>

            <!-- output -->
            <publish_odom>true</publish_odom>
            <publish_odom_tf>false</publish_odom_tf>
            <publish_wheel_tf>false</publish_wheel_tf>

            <odometry_topic>odom</odometry_topic>
            <odometry_frame>$(arg robot_name)/odom</odometry_frame>
            <robot_base_frame>$(arg robot_name)/base_link</robot_base_frame>
        </plugin>
    </gazebo>
</robot>